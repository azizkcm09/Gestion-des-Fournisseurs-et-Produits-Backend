
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  mdp: 'mdp',
  adresse: 'adresse',
  statut: 'statut',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProduitScalarFieldEnum = {
  idProduit: 'idProduit',
  nom: 'nom',
  description: 'description',
  prix: 'prix',
  quantiteStock: 'quantiteStock',
  typeProduit: 'typeProduit',
  imageURL: 'imageURL',
  dateAjout: 'dateAjout',
  statutProduit: 'statutProduit',
  categorieId: 'categorieId',
  fournisseurId: 'fournisseurId'
};

exports.Prisma.CategorieScalarFieldEnum = {
  idCategorie: 'idCategorie',
  nomCategorie: 'nomCategorie',
  descriptionCategorie: 'descriptionCategorie',
  typeCategorie: 'typeCategorie',
  imageCategorie: 'imageCategorie'
};

exports.Prisma.CommandeScalarFieldEnum = {
  idCommande: 'idCommande',
  numeroCommande: 'numeroCommande',
  dateCommande: 'dateCommande',
  statutCommande: 'statutCommande',
  totalCommande: 'totalCommande',
  taxesAppliquees: 'taxesAppliquees',
  adresseLivraison: 'adresseLivraison',
  modePaiement: 'modePaiement',
  datePaiement: 'datePaiement',
  clientId: 'clientId'
};

exports.Prisma.LigneCommandeScalarFieldEnum = {
  idLigneCommande: 'idLigneCommande',
  quantite: 'quantite',
  prixUnitaire: 'prixUnitaire',
  commandeId: 'commandeId',
  produitId: 'produitId'
};

exports.Prisma.LivraisonScalarFieldEnum = {
  idLivraison: 'idLivraison',
  dateExpedition: 'dateExpedition',
  dateLivraisonPrevue: 'dateLivraisonPrevue',
  dateLivraisonEffective: 'dateLivraisonEffective',
  statutLivraison: 'statutLivraison',
  notesLivreur: 'notesLivreur',
  signatureClient: 'signatureClient',
  commandeId: 'commandeId',
  livreurId: 'livreurId'
};

exports.Prisma.RapportScalarFieldEnum = {
  idRapport: 'idRapport',
  typeRapport: 'typeRapport',
  dateGeneration: 'dateGeneration',
  periode: 'periode',
  contenuPDF: 'contenuPDF',
  color: 'color',
  adminId: 'adminId'
};

exports.Prisma.AlerteStockScalarFieldEnum = {
  idAlerte: 'idAlerte',
  seuilMinimum: 'seuilMinimum',
  dateAlerte: 'dateAlerte',
  statutAlerte: 'statutAlerte',
  produitId: 'produitId',
  adminId: 'adminId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Statut = exports.$Enums.Statut = {
  ACTIF: 'ACTIF',
  INACTIF: 'INACTIF',
  BLOQUE: 'BLOQUE'
};

exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  CLIENT: 'CLIENT',
  FOURNISSEUR: 'FOURNISSEUR',
  LIVREUR: 'LIVREUR'
};

exports.StatutProduit = exports.$Enums.StatutProduit = {
  DISPONIBLE: 'DISPONIBLE',
  EN_RUPTURE: 'EN_RUPTURE',
  ARCHIVE: 'ARCHIVE'
};

exports.StatutCommande = exports.$Enums.StatutCommande = {
  EN_ATTENTE: 'EN_ATTENTE',
  CONFIRMEE: 'CONFIRMEE',
  EN_PREPARATION: 'EN_PREPARATION',
  EXPEDIEE: 'EXPEDIEE',
  LIVREE: 'LIVREE',
  ANNULEE: 'ANNULEE'
};

exports.StatutLivraison = exports.$Enums.StatutLivraison = {
  EN_TRANSIT: 'EN_TRANSIT',
  LIVREE: 'LIVREE',
  EN_ATTENTE: 'EN_ATTENTE'
};

exports.StatutAlerte = exports.$Enums.StatutAlerte = {
  ACTIVE: 'ACTIVE',
  RESOLUE: 'RESOLUE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Produit: 'Produit',
  Categorie: 'Categorie',
  Commande: 'Commande',
  LigneCommande: 'LigneCommande',
  Livraison: 'Livraison',
  Rapport: 'Rapport',
  AlerteStock: 'AlerteStock'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
